
N: Number of LRU sets
R: LRU order (R slots to a set)
Time refers to state update, not search.

Naive LRU:

	Space: N * Rlg(R)
	N sets, each with R slots, each requiring lg(R) bits.

	Time: R/P, 1 < = P <= R
	R slots requiring an update, of which P can be performed in parallel
	(assuming update happens at the same time as check).

LRUMAP:

	Space: R! * Rlg(R!) + N * lg(R!)
	Fixed cost of R! permutations, each with R possible moves, each
	encoding a destination in lg(R!). Variable cost of N sets, each
	encoding a current state in lg(R!).

	Time: 1
	Only one state update.

Pseudo LRU:

	Space: N * lg(R)
	N sets, each with a height-lg(R) tree.

	Time: lg(R) / P, 1 <= P <= lg(R)
	We update each direction bit. Since these are bits, not words,
	P is almost certainly equal to lg(R). 

Pseudo-LRUMAP:

	Space: 2^lg(R) * Rlg(R) + N * lg(R)
	Time: 1
